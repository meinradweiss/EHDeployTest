name: Deploy Fabric Artifacts and Rebind Eventstreams

on:
  workflow_dispatch:


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Azure AD Token
        id: get_token
        run: |
          TOKEN=$(curl -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            -d "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
            -d "grant_type=client_credentials" \
            "https://login.microsoftonline.com/${{ secrets.AZURE_TENANT_ID }}/oauth2/v2.0/token" \
            | jq -r .access_token)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT


      - name: List Stages
        id: source_stages
        run: |
          SOURCE_STAGES=$(curl -s -X GET "https://api.fabric.microsoft.com/v1/deploymentPipelines/${{ secrets.FABRIC_PIPELINE_ID }}/stages" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
            -H "Content-Type: application/json")
          echo "source_stages=$SOURCE_STAGES" >> $GITHUB_OUTPUT
          echo "Value of SOURCE_STAGES is: $SOURCE_STAGES"

      
      
      - name: List Source Stage Items
        id: source_items
        run: |
          SOURCE_ITEMS=$(curl -s -X GET "https://api.fabric.microsoft.com/v1/deploymentPipelines/${{ secrets.FABRIC_PIPELINE_ID }}/stages/${{ secrets.FABRIC_DEVELOPMENT_STAGE_ID }}/items" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
            -H "Content-Type: application/json")
          echo "source_items=$SOURCE_ITEMS" >> $GITHUB_OUTPUT
          echo "Value of SOURCE_ITEMS is: $SOURCE_ITEMS"


      # - name: Filter Deployable Items
      #   id: filtered_items
      #   run: |
      #     FILTERED=$(echo '${{ steps.source_items.outputs.source_items }}' | jq '[.value[] | select(.itemType == "Notebook" or .itemType == "Lakehouse" or .itemType == "Eventstream" or .itemType == "Eventhouse" or .itemType == "KQLDatabase" or .itemType == "KQLQueryset") | {itemId: .itemId, itemType: .itemType}]')
      #     {
      #       echo "filtered_items<<EOF"
      #       echo "$FILTERED"
      #       echo "EOF"
      #     } >> "$GITHUB_OUTPUT"
      #     echo "Value of FILTERED is: $FILTERED"

      # - name: Filter Deployable Items
      #   id: filtered_items
      #   run: |
      #     FILTERED=$(echo '${{ steps.source_items.outputs.source_items }}' | jq '[.value[] | select(.itemType | IN("Notebook", "Lakehouse", "Eventstream", "Eventhouse", "KQLDatabase", "KQLQueryset")) | {itemId: .itemId, itemType: .itemType}]')
      #     {
      #       echo "filtered_items<<eof"< p=""> </eof"<>
      #       echo "$FILTERED"
      #       echo "EOF"
      #     } >> "$GITHUB_OUTPUT"
      #     echo "Value of FILTERED is: $FILTERED"
      

      - name: Filter Deployable Items (Excluding Specific Types)
        id: filtered_items
        run: |
          FILTERED=$(echo '${{ steps.source_items.outputs.source_items }}' | jq '[.value[] | select(.itemType | IN("XXX", "ZZZ") | not) | {itemId: .itemId, itemType: .itemType}]')
          {
            echo "filtered_items<<EOF"
            echo "$FILTERED"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          echo "Value of FILTERED is: $FILTERED"
          


      - name: Deploy All Filtered Items to Target Stage
        id: deploy
        run: |
          echo "Preparing batch deployment..."
      
          # Prepare the list of items to deploy
          ITEMS_JSON=$(echo '${{ steps.filtered_items.outputs.filtered_items }}' | jq '[.[] | {sourceItemId: .itemId, itemType: .itemType}]')
          echo "Items to deploy: $ITEMS_JSON"
      
          # Construct the deployment payload
          DEPLOY_PAYLOAD=$(jq -n \
            --arg sourceStageId "${{ secrets.FABRIC_DEVELOPMENT_STAGE_ID }}" \
            --arg targetStageId "${{ secrets.FABRIC_PRODUCTION_STAGE_ID }}" \
            --arg note "Batch deployment from GitHub Actions, with items" \
            --argjson items "$ITEMS_JSON" \
            '{
              sourceStageId: $sourceStageId,
              targetStageId: $targetStageId,
              items: $items,
              note: $note
            }')
      
          echo "Sending payload:"
          echo "$DEPLOY_PAYLOAD" | jq .
      
          # Send the deployment request and capture status code
          # Save full response (headers + body) to a file
          curl -i -s -X POST "https://api.fabric.microsoft.com/v1/deploymentPipelines/${{ secrets.FABRIC_PIPELINE_ID }}/deploy" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
            -H "Content-Type: application/json" \
            -d "$DEPLOY_PAYLOAD" > full_response.txt
          
          # Print the full response to the console
          echo "📨 Full API Response:"
          cat full_response.txt

          #OPERATION_ID=$(grep -i "x-ms-operation-id" full_response.txt | awk '{print $2}' | tr -d '\r')
          OPERATION_ID=$(grep -i "^x-ms-operation-id:" full_response.txt | cut -d' ' -f2 | tr -d '\r')
          echo "🆔 Operation ID: $OPERATION_ID"

          STATUS_CODE=$(grep -oE 'HTTP/[0-9\.]+ [0-9]+' full_response.txt | awk '{print $2}')
          echo "🔍 HTTP Status Code: $STATUS_CODE"
      

          if [[ "$STATUS_CODE" -eq 200 || "$STATUS_CODE" -eq 202 ]]; then
            echo "✅ Deployment request accepted"
          else
            echo "❌ Deployment request failed with status: $STATUS_CODE"
            exit 1
          fi
          
          echo "operation_id=$OPERATION_ID" >> $GITHUB_OUTPUT



      
      - name: Wait for Deployment Completion
        run: |
          echo "Waiting for deployment to complete..."
          STATUS="Running"
          while [[ "$STATUS" == "Running" || "$STATUS" == "NotStarted" ]]; do
            sleep 10
            RESPONSE=$(curl -s -X GET "https://api.fabric.microsoft.com/v1/operations/${{ steps.deploy.outputs.operation_id }}" \
              -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}")
            STATUS=$(echo "$RESPONSE" | jq -r '.status')
            echo "Current status: $STATUS"
          done
      
          if [[ "$STATUS" != "Succeeded" ]]; then
            echo "❌ Deployment failed with status: $STATUS"
            exit 1
          else
            echo "✅ Deployment completed successfully."
          fi


      - name: List Destination Stage Items
        id: dest_items
        run: |
          DEST_ITEMS=$(curl -s -X GET "https://api.fabric.microsoft.com/v1/deploymentPipelines/${{ secrets.FABRIC_PIPELINE_ID }}/stages/${{ secrets.FABRIC_PRODUCTION_STAGE_ID }}/items" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
            -H "Content-Type: application/json")
          echo "dest_items=$DEST_ITEMS" >> $GITHUB_OUTPUT
          echo "Value of DESTINATION_ITEMS is: $DEST_ITEMS"

          
      # - name: Rebind Eventstreams to Eventhouses
      #   run: |
      #     echo '${{ steps.source_items.outputs.source_items }}' > source.json
      #     echo '${{ steps.dest_items.outputs.dest_items }}' > dest.json

      #     jq -r '
      #       def get_name_map:
      #         .items | map({(.itemType + "_" + .name): .itemId}) | add;

      #       def get_workspace_map:
      #         .items | map({(.itemType + "_" + .name): .workspaceId}) | add;

      #       get_name_map as $source_map |
      #       get_workspace_map as $workspace_map |
      #       input | get_name_map as $dest_map |
      #       get_workspace_map as $dest_workspace_map |
      #       .items[]
      #       | select(.itemType == "Eventstream")
      #       | {
      #           name: .name,
      #           source_id: .itemId,
      #           dest_id: ($dest_map["Eventstream_" + .name]),
      #           dest_workspace: ($dest_workspace_map["Eventstream_" + .name]),
      #           eventhouse_id: ($dest_map["Eventhouse_" + .name]),
      #           eventhouse_workspace: ($dest_workspace_map["Eventhouse_" + .name])
      #         }
      #     ' source.json dest.json > mapping.json

      #     jq -c '.[]' mapping.json | while read item; do
      #       NAME=$(echo $item | jq -r .name)
      #       STREAM_ID=$(echo $item | jq -r .dest_id)
      #       STREAM_WS=$(echo $item | jq -r .dest_workspace)
      #       HOUSE_ID=$(echo $item | jq -r .eventhouse_id)
      #       HOUSE_WS=$(echo $item | jq -r .eventhouse_workspace)

      #       echo "Updating Eventstream $NAME in workspace $STREAM_WS to point to Eventhouse $HOUSE_ID"

      #       curl -X POST "https://api.fabric.microsoft.com/v1/workspaces/$STREAM_WS/eventstreams/$STREAM_ID/updateDefinition?updateMetadata=true" \
      #         -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
      #         -H "Content-Type: application/json" \
      #         -d '{
      #           "definition": {
      #             "parts": [
      #               {
      #                 "path": "eventstream.json",
      #                 "payload": "'$(echo "{\"destinations\":[{\"name\":\"Eventhouse\",\"type\":\"Eventhouse\",\"properties\":{\"workspaceId\":\"$HOUSE_WS\",\"itemId\":\"$HOUSE_ID\",\"tableName\":\"$NAME\"}}]}" | base64)'"
      #               }
      #             ]
      #           }
      #         }'
      #     done
